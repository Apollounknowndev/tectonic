plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.81'
    id 'java-library'
    id 'me.modmuss50.mod-publish-plugin' version '0.5.1'
}
base {
    archivesName = "${mod_id}-neoforge-1.20"
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":common")
    compileOnly project(":dfs-1-19")
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource, project(":dfs-1-19").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava, project(":dfs-1-19").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource, project(":dfs-1-19").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from(project(":common").sourceSets.main.resources, project(":dfs-1-19").sourceSets.main.resources)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

publishMods {
    file = jar.archiveFile
    changelog = "${update_changelog}"
    type = STABLE
    modLoaders.add("neoforge")
    displayName = "v%s ~ Neoforge 1.20.2".formatted(project.version)

    dryRun = false

    modrinth {
        accessToken = providers.environmentVariable("TOKEN_MR")
        projectId = "lWDHr9jE"

        minecraftVersionRange {
            start = "1.20.2"
            end = "1.20.4"
        }

        optional {
            slug = "lithostitched"
        }
    }

    curseforge {
        accessToken = providers.environmentVariable("TOKEN_CF")
        projectId = "686836"

        minecraftVersionRange {
            start = "1.20.2"
            end = "1.20.4"
        }

        optional("lithostitched")
    }
}